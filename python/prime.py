from sympy import mod_inverse

# Given values
e = 8659684496643365614591635073640497224245984146882393676775291263352504448929212549412729063967941967906805077668936732156501448409303883976863020518688779
p = 10408736805510988911172223599614729944224283301970556639802664760349299292573664928070095424308751314480810907164732585826173918110723274201426276603899829
q = 13256212802305414124316278333474039185745169020220201019346849525731948749218469579515491879779339030698165724858108438478114391226282598963086462149776261
n = 138012665252108772712309596282595273270312250006825432236828569075215491018073967909227336636333554976248049970032283459888691234130599669929439461161924845194888640305496686961221835970218256686333659216110790447198302318661681453345987704562856670798791524277293281207779745221729547619008307496271557649219

phi_n = (p - 1) * (q - 1)
d = mod_inverse(e, phi_n)

ciphertext_hex = "E100D1AFC1801BFEBE0F1E4295DF023C6DC93C9236C3DDBB175561DBA837BEE712D41434186ADD550B4A26E487EE350314884A5F2E415E9AD2F23B3056269EE907DA301B369EE63620FCF7A43312EEA43B17A44080422DBC3E251516EAFC0E1007B4029202E9746FD61C6D4434C861DCD3AD92193C0865FF27A7C97806F5F423"
ciphertext_integer = int(ciphertext_hex, 16)

plaintext_integer = pow(ciphertext_integer, d, n)
plaintext_hex = hex(plaintext_integer)[2:]

# Ensure plaintext_hex has even length
if len(plaintext_hex) % 2:
    plaintext_hex = '0' + plaintext_hex

# Print the decrypted message in hex format
print(plaintext_hex)

# Try to decode as UTF-8 text, if it fails, handle the binary data appropriately
try:
    plaintext = bytes.fromhex(plaintext_hex).decode('utf-8')
    print(plaintext)
except UnicodeDecodeError:
    print("Decrypted data is not valid UTF-8. Here is the hex representation of the decrypted data:")
    print(plaintext_hex)

